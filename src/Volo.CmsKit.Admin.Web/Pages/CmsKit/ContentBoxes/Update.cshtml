@page "{Id}"

@using System.Globalization
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Button
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Card
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Form
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Tab
@using Volo.Abp.AspNetCore.Mvc.UI.Bundling.TagHelpers
@using Volo.Abp.AspNetCore.Mvc.UI.Packages.Codemirror
@using Volo.Abp.AspNetCore.Mvc.UI.Packages.TuiEditor
@using Volo.Abp.AspNetCore.Mvc.UI.Packages.Uppy
@using Volo.Abp.AspNetCore.Mvc.UI.Packages.Slugify
@using Volo.Abp.Data
@using Volo.Abp.Localization
@using Volo.Abp.ObjectExtending
@using Volo.CmsKit.Admin.Web.Menus
@using Volo.CmsKit.Admin.Web.Pages
@using Volo.CmsKit.Admin.Web.Pages.CmsKit.ContentBoxes
@inject IStringLocalizerFactory StringLocalizerFactory

@inherits CmsKitAdminPageBase

@model Volo.CmsKit.Admin.Web.Pages.CmsKit.ContentBoxes.UpdateModel

@{
    PageLayout.Content.Title = L["ContentBoxes"].Value;
    PageLayout.Content.BreadCrumb.Add(L["Menu:CMS"].Value);
    PageLayout.Content.MenuItemName = CmsKitAdminMenus.ContentBoxes.ContentBoxMenu;
}


@section scripts {
    <abp-script-bundle>
        <abp-script type="typeof(SlugifyScriptContributor)" />
        <abp-script src="/client-proxies/cms-kit-common-proxy.js" />
        <abp-script src="/client-proxies/cms-kit-admin-proxy.js" />
        <abp-script src="/Pages/CmsKit/Contents/addWidgetModal.js" />
        <abp-script src="/Pages/CmsKit/ContentBoxes/mediaUploader.js" />
        <abp-script src="/Pages/CmsKit/ContentBoxes/update.js" />
    </abp-script-bundle>
}

@section styles {
    <abp-style-bundle>
        <abp-style src="/Pages/CmsKit/ContentBoxes/update.css" />
    </abp-style-bundle>
}

<abp-card>
    <abp-card-header title="@L["Update"].Value"></abp-card-header>
    <abp-card-body>
        <form asp-page="/CmsKit/ContentBoxes/Update" id="form-content-box-update">
            <abp-input asp-for="@Model.Id" />

            <abp-input asp-for="@Model.ViewModel.ConcurrencyStamp" />

            <abp-input asp-for="@Model.ViewModel.Title" />
            <abp-input asp-for="ViewModel.Section" label-tooltip-icon="fa fa-info-circle" label-tooltip="@L["ContentBoxSectionInformation"]" />
            <abp-input asp-for="ViewModel.BoxType" label-tooltip-icon="fa fa-info-circle" label-tooltip="@L["ContentBoxBoxTypeInformation"]" />
            <abp-input asp-for="ViewModel.BoxName" label-tooltip-icon="fa fa-info-circle" label-tooltip="@L["ContentBoxSlugInformation"]" />
            <abp-input asp-for="ViewModel.ActionType" label-tooltip-icon="fa fa-info-circle" label-tooltip="@L["ContentBoxBoxNameInformation"]" />
            <abp-input asp-for="ViewModel.Action" label-tooltip-icon="fa fa-info-circle" label-tooltip="@L["ContentBoxActionTypeInformation"]" />
            <abp-input asp-for="ViewModel.ActionUrl" label-tooltip-icon="fa fa-info-circle" label-tooltip="@L["ContentBoxActionInformation"]" />
            <abp-input asp-for="ViewModel.Summary" label-tooltip-icon="fa fa-info-circle" label-tooltip="@L["ContentBoxSummaryInformation"]" />
            <abp-input asp-for="ViewModel.Status" label-tooltip-icon="fa fa-info-circle" label-tooltip="@L["ContentBoxStatusInformation"]" />
            <abp-input asp-for="ViewModel.Icon" label-tooltip-icon="fa fa-info-circle" label-tooltip="@L["ContentBoxIconInformation"]" />
            <abp-input asp-for="ViewModel.Description" label-tooltip-icon="fa fa-info-circle" label-tooltip="@L["ContentBoxDescriptionInformation"]" />
            <abp-input asp-for="ViewModel.Order" label-tooltip-icon="fa fa-info-circle" label-tooltip="@L["ContentBoxOrderInformation"]" />
            <img class="img-fluid rounded" style="width:100px;height:100px" src="/images/no-image.png" loading="lazy" id="img-upload" alt="" />
            <input type="file" id="ImageFile" class="form-control" />
            <abp-input asp-for="ViewModel.MediaId" type="hidden" />
            <abp-button button-type="Danger" type="button" text="@L["Delete"].Value" id="button-delete-image" />


            <div class="content-editor cms-kit-editor"
                 id="ContentEditor"
            @* data-input-id="@Html.IdFor(x => x.ViewModel.Content)" *@
                 data-language="@(CultureInfo.CurrentUICulture.TwoLetterISOLanguageName)">

                @(Html.Kendo()
                    //Editor()
                    //.Name("Content")
                    .EditorFor(m => m.ViewModel.Content)
                    .HtmlAttributes(new { style = "height:100%" })
                    .StyleSheets(css => css
                    .Add(Url.Content("~/shared/web/editor/editorStyles.css"))
                    ).Encoded(false)
                    .Tools(tools => tools
                    .Clear()
                    .Bold().Italic().Underline().Strikethrough()
                    .Undo().Redo()
                    .JustifyLeft().JustifyCenter().JustifyRight().JustifyFull()
                    .InsertUnorderedList().InsertOrderedList().InsertUpperRomanList().InsertLowerRomanList()
                    .Outdent().Indent()
                    .CreateLink().Unlink()
                    .InsertImage()
                    .InsertFile()
                    .SubScript()
                    .SuperScript()
                    .TableEditing()
                    .ViewHtml()
                    .Formatting()
                    .CleanFormatting()
                    .FormatPainter()
                    .FontName()
                    .FontSize()
                    .ForeColor().BackColor()
                    .Print()
                    // .CustomTemplate(x => x.Template("<label for='templateTool' style='vertical-align:middle;'>Background:</label> <select id='templateTool'><option value=''>none</option><option value='\\#ff9'>yellow</option><option value='\\#dfd'>green</option></select>"))
                    .CustomButton(x => x.Name("FullScreen").Tooltip("Full Screen").Exec(@<text>
                    function(e) {
                    toggleFullScreen();
                    }
                </text>))
                    ).ImageBrowser(imageBrowser => imageBrowser
                    .Image("~/shared/UserFiles/Images/{0}")
                    .Read("Read", "ImageBrowser")
                    .Create("Create", "ImageBrowser")
                    .Destroy("Destroy", "ImageBrowser")
                    .Upload("Upload", "ImageBrowser")
                    )

                    )
            </div>


            @foreach (var propertyInfo in ObjectExtensionManager.Instance.GetProperties<UpdateModel.UpdateContentBoxViewModel>())
            {
                if (!propertyInfo.Name.EndsWith("_Text"))
                {
                    if (propertyInfo.Type.IsEnum || !propertyInfo.Lookup.Url.IsNullOrEmpty())
                    {
                        if (propertyInfo.Type.IsEnum)
                        {
                            Model.ViewModel.ExtraProperties.ToEnum(propertyInfo.Name, propertyInfo.Type);
                        }
                        <abp-select asp-for="ViewModel.ExtraProperties[propertyInfo.Name]"
                                    label="@propertyInfo.GetLocalizedDisplayName(StringLocalizerFactory)"
                                    autocomplete-api-url="@propertyInfo.Lookup.Url"
                                    autocomplete-selected-item-name="@Model.ViewModel.GetProperty(propertyInfo.Name+"_Text")"
                                    autocomplete-selected-item-value="@Model.ViewModel.GetProperty(propertyInfo.Name)"
                                    autocomplete-filter-param-name="@propertyInfo.Lookup.FilterParamName"
                                    autocomplete-items-property-name="@propertyInfo.Lookup.ResultListPropertyName"
                                    autocomplete-display-property-name="@propertyInfo.Lookup.DisplayPropertyName"
                                    autocomplete-value-property-name="@propertyInfo.Lookup.ValuePropertyName"></abp-select>
                    }
                    else
                    {
                        <abp-input type="@propertyInfo.GetInputType()"
                                   asp-for="ViewModel.ExtraProperties[propertyInfo.Name]"
                                   label="@propertyInfo.GetLocalizedDisplayName(StringLocalizerFactory)"
                                   asp-format="@propertyInfo.GetInputFormatOrNull()"
                                   value="@propertyInfo.GetInputValueOrNull(Model.ViewModel.GetProperty(propertyInfo.Name))" />
                    }
                }
            }

        </form>
    </abp-card-body>
    <abp-card-footer>
        <abp-button button-type="Primary" type="submit" text="@L["Submit"].Value" id="button-content-box-update" />
        <abp-button button-type="Secondary" type="submit" text="@L["Return"].Value" id="button-content-box-return" />
    </abp-card-footer>
</abp-card>
<input hidden id="GeneratedWidgetText" />